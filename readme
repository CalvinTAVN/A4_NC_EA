Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?
Calvin Nguyen


------------------------------------------------------------------------
Student 2: What is your name?
Alex Eng


------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.
policy list, notes, lectures, office hours, precepts, assignment page
Lab TA's handout, course instructor


------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

lectures, precepts, office hours, notes, policy list, assignment page
Lab TA's, handouts, course instructors

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None


------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

kinda helpful, not fun at all


------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

I learned a lot about how file trees work and felt slightly more comfortable
debugging and testing my code. "It was fun"

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

We tried our best do the assignment despite both of us getting Covid
which really inhibitted our work process.


------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

variable names are too short and areas deeply nested. I disagree with these
errors since most of checkerDT.c is repetitive, checking numerous properties
and invariants.

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

-variables such as result used before declaration.
 I disagree with this errors since in those cases, we use a wide array
 of if  and if else statements that cover all cases.
-errors where we don't use functions outside of files. I disagree
with this error since some of these functions were simply created just in
case we needed to use them such as Node_hasChild or Node_compare.


------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

-Validation comments: I disagree with this since some parameters could be
null such as contents and str or childID. If we asserted them as != NULL,
we would get errors.

-deeply nested errors: these can't be helped in such a big piece of code.



------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertPath(char* path)
---------------------------------------------------------------
         ./bdtBad2        BDT_newNode(Node_T parent, char* dir)
---------------------------------------------------------------
         ./bdtBad3        BDT_unlinkParentToChild(Node_T parent, Node_T child)
===============================================================

------------------------------------------------------------------------
bdtBad4 and bdtBad5 are optional extra credit:

For bdtBad4, you do not have to find the bug and simply identifying
the bug is insufficient to earn the extra credit. Instead, indicate
what is the fundamental difference with trying to debug this
executable in gdb versus the first three (Hint: your answer should
have nothing to do with the program's code.):

The fundamental difference with trying to debug this executable in gdb
vs the other 3 is that the output for bdtBad4 is unpredictable since it
is accessing old and arbitrary memory which comes out as a random output for
multiple lines including line 100 on the bdt_client.c.

For bdtBad5, you do not have to find the bug and simply identifying
the bug is insufficient to earn the extra credit. Instead, discuss how
the program could crash within the DynArray module, which we promise is
correct, while executing a callback function that is, itself, correct:

The bug was in the BDT_toString where it created a new DynArray but with count + 1.
This is a problem because we then apply the mapping method to an nonexistent node.
With that being said, the program could crash within the DynArray Module if the module
is not used correctly. For example, in this situation, we created a new DynArray with
count + 1 when it should be count instead.

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

-Many functions in both nodeGood.c and dtGood.c could use more comments
within the actual functions stating how the function is doing what they are doing
and how.
-Many functions in both NodeGood.c and dtGood.c need more modulation such as in
DT_insertRestOfPath and DT_toString
                    -DT_insertRestOfPath could modulate the part where it checks
                    if any of the newly created paths are null and destroys the path.

-Some Variable names could be better differentiated such as new and firstnew
-Some Functions Name could be shortened but still retain the same level of clarity
      like DT_strlenAccumulate could be shortened to DT_strlenAccum
 -in DT_toString, totalStrlen could be camelCased to totalStrLen
 -Some Methods in both Node.c and DtGood.c aren't use at all such as
 Node_hasChild, Node_linkChild.


------------------------------------------------------------------------
