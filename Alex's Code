/*--------------------------------------------------------------------*/
/* node.c                                                             */
/* Author: Calvin Nguyen & Alex Eng                                   */
/*--------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stdio.h>

#include "dynarray.h"
#include "node.h"
#include "a4def.h"

/*
   A node structure represents a directory in the directory tree
*/
struct node {
   /* the full path of this directory */
   char* path;

   /* the parent directory of this directory
      NULL for the root of the directory tree */
   Node_T parent;

   /* the subdirectories of this directory
      stored in sorted order by pathname */
   DynArray_T children;

   /* boolean isFile that determines if the noode is a 
      file or directory*/
   boolean isFile;

   /* void * that contains the pointer to the contents 
      if the node is a file*/
   void *contents;

   /* size_t that contains the length in char of the file */
   size_t fileLength;
};

/* see node.h for specification */
size_t Node_destroy(Node_T n) {
   size_t i;
   size_t count = 0;
   Node_T c;

   assert(n != NULL);

   if(n->isFile == FALSE) {
       for(i = 0; i < DynArray_getLength(n->children); i++)
       {
            c = DynArray_get(n->children, i);
            count += Node_destroy(c);
       }
       DynArray_free(n->children);
   }

   if(n->contents != NULL) {
       free(n->contents);
   }
   free(n->path);
   free(n);
   count++;

   return count;
}

/* see node.h for specification */
Node_T Node_getChild(Node_T n, size_t childID) {
   assert(n != NULL);
   assert(n->isFile == FALSE);
   assert(n->contents == NULL);
   assert(n->fileLength == NULL);

   if(DynArray_getLength(n->children) > childID) {
      return DynArray_get(n->children, childID);
   }
   else {
      return NULL;
   }
}

/* see node.h for specification */
Node_T Node_getParent(Node_T n) {
   assert(n != NULL);

   return n->parent;
}

/* see node.h for specification */
int  Node_unlinkChild(Node_T parent, Node_T child) {
   size_t i;

   assert(parent != NULL);
   assert(child != NULL);
   assert(CheckerDT_Node_isValid(parent));
   assert(CheckerDT_Node_isValid(child));

   if(DynArray_bsearch(parent->children, child, &i,
         (int (*)(const void*, const void*)) Node_compare) == 0) {
      assert(CheckerDT_Node_isValid(parent));
      assert(CheckerDT_Node_isValid(child));
      return PARENT_CHILD_ERROR;
   }

   (void) DynArray_removeAt(parent->children, i);

   assert(CheckerDT_Node_isValid(parent));
   assert(CheckerDT_Node_isValid(child));
   return SUCCESS;
}

