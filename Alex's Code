/*--------------------------------------------------------------------*/
/* ft.c                                                               */
/* Author: Calvin Nguyen & Alex Eng                                   */
/*--------------------------------------------------------------------*/

#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#include "dynarray.h"
#include "ft.h"
#include "node.h"
#include "a4def.h"

/* A Directory Tree is an AO with 3 state variables: */
/* a flag for if it is in an initialized state (TRUE) or not (FALSE) */
static boolean isInitialized;
/* a pointer to the root node in the hierarchy */
static Node_T root;
/* a counter of the number of nodes in the hierarchy */
static size_t count;

/* A counter for the number of file nodes in the hierarchy*/
static size_t fileCount;

/* a counter for the number of directory nodes in the hierarchy*/
static size_t directoryCount;

/*
   Starting at the parameter curr, traverses as far down
   the hierarchy as possible while still matching the path
   parameter.
   Returns a pointer to the farthest matching node down that path,
   or NULL if there is no node in curr's hierarchy that matches
   a prefix of the path
*/
static Node_T FT_traversePathFrom(char* path, Node_T curr) {
   Node_T found;
   size_t i;

   assert(path != NULL);

   if(curr == NULL)
      return NULL;

   else if(!strcmp(path,Node_getPath(curr)))
      return curr;
   
   else if(checkIsFile(curr) == TRUE)
        return NULL;

   else if(!strncmp(path, Node_getPath(curr), strlen(Node_getPath(curr)))) {
      for(i = 0; i < Node_getNumChildren(curr); i++) {
         found = DT_traversePathFrom(path,
                                Node_getChild(curr, i));
         if(found != NULL)
            return found;
      }
      return curr;
   }
   return NULL;
}

/* see ft.h for specification */
int FT_insertDir(char* path) {

   Node_T curr;
   int result;

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   assert(path != NULL);
   assert(path->isFile == FALSE);

   if(!isInitialized)
      return INITIALIZATION_ERROR;
   curr = DT_traversePath(path);
   result = DT_insertRestOfPath(path, curr);
   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   return result;
}

/* see ft.h for specification */
int FT_insertFile(char *path, void *contents, size_t length) {

   Node_T curr;
   int result;

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   assert(path != NULL);
   assert(path->isFile == TRUE);
   
   if(!isInitialized)
      return INITIALIZATION_ERROR;
   curr = DT_traversePath(path);
   result = DT_insertRestOfPath(path, curr);
   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   return result;
}
