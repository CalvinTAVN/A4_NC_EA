/* see ft.h for specification */
boolean FT_containsDir(char* path) {
   Node_T curr;
   boolean result;

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   assert(path != NULL);

   if(!isInitialized)
      return FALSE;

   curr = DT_traversePath(path);
   if(checkIsFile(curr) == FALSE)
        return FALSE;

   if(curr == NULL)
      result = FALSE;
   else if(strcmp(path, Node_getPath(curr)))
      result = FALSE;
   else
      result = TRUE;

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   return result;
}

/*
  Removes the directory hierarchy rooted at path starting from
  curr. If curr is the data structure's root, root becomes NULL.
  Returns NO_SUCH_PATH if curr is not the node for path,
  and SUCCESS otherwise.
 */
static int FT_rmDirAt(char* path, Node_T curr) {

   Node_T parent;

   assert(path != NULL);
   assert(curr != NULL);
   if(checkIsFile(curr) == TRUE)
        return NOT_A_DIRECTORY;

   parent = Node_getParent(curr);

   if(!strcmp(path,Node_getPath(curr))) {
      if(parent == NULL)
         root = NULL;
      else
         Node_unlinkChild(parent, curr);

      FT_removePathFrom(curr);

      return SUCCESS;
   }
   else
      return NO_SUCH_PATH;

}

/* see ft.h for specification */
int FT_rmDir(char* path) {
   Node_T curr;
   int result;

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   assert(path != NULL);

   if(!isInitialized)
      return INITIALIZATION_ERROR;

   curr = DT_traversePath(path);
   if(checkIsFile(curr) == TRUE)
        return NOT_A_DIRECTORY;

   if(curr == NULL)
      result =  NO_SUCH_PATH;
   else
      result = FT_rmDirAt(path, curr);

   /* assert(CheckerDT_isValid(isInitialized,root,count)); */
   return result;
}
